// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.flex

package scanner;
import java.util.ArrayList;
import java.io.IOException;
import parser.Lexical;
import static java.lang.System.exit;
import codegenerator.CG;
import java.io.FileWriter;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CmpScnr implements Lexical{

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\7"+
    "\1\13\1\14\1\7\1\15\1\16\1\17\1\20\11\21"+
    "\2\7\1\22\1\23\1\5\2\0\1\24\3\25\1\26"+
    "\1\25\21\27\1\30\2\27\1\7\1\31\2\7\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\27\1\44\1\45\1\27\1\46\1\47"+
    "\1\50\1\27\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\30\1\57\1\27\1\7\1\60\1\7\u019e\0\1\7"+
    "\343\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\2\4\1\1"+
    "\3\4\2\5\1\4\1\1\20\6\1\4\1\0\1\7"+
    "\2\0\1\10\3\0\1\3\1\11\2\5\1\0\1\12"+
    "\1\0\7\6\1\13\14\6\1\7\1\10\3\0\1\14"+
    "\7\6\1\13\11\6\1\0\1\15\1\0\1\11\1\16"+
    "\1\14\2\6\1\13\12\6\1\14\1\6\1\13\10\6"+
    "\1\14\2\6\1\13\3\6\1\14\3\6\1\13\1\6"+
    "\1\14\1\6\1\13\2\6\1\14\1\6\1\13\1\6"+
    "\1\14\1\6\1\13\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\2\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\61\0\142\0\223\0\304\0\61"+
    "\0\365\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\223\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\61\0\u05ef\0\u0620\0\61\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\61"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u080a\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u05be\0\u0620\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0c71\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\61\0\u0fb2\0\u0fb2"+
    "\0\61\0\u0fe3\0\u1014\0\u1045\0\u1014\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u147b\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u15a1\0\u1634\0\u1665"+
    "\0\u1696\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u07a8\0\u1ff7\0\u2028";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\1\10\1\6\1\13\1\14\1\10\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\4\23\2\2\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\2\23\1\30\1\23"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\23"+
    "\1\40\1\41\1\23\1\42\63\0\1\4\101\0\1\10"+
    "\35\0\6\43\1\44\22\43\1\45\27\43\10\0\1\10"+
    "\50\0\11\46\1\47\17\46\1\50\27\46\14\0\1\10"+
    "\3\0\1\51\2\0\1\10\52\0\1\10\2\0\1\51"+
    "\2\0\1\10\50\0\1\52\3\0\1\53\3\0\1\10"+
    "\53\0\1\54\1\0\2\55\6\0\1\56\46\0\1\54"+
    "\1\0\2\17\54\0\1\10\5\0\1\10\36\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\17\62\1\63\6\62\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\62\2\0\5\62\1\0\26\62"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\0\5\62\1\0\15\62\1\64\1\62\1\65\6\62"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\0\5\62\1\0\13\62\1\66\1\62\1\67\10\62"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\0\5\62\1\0\13\62\1\70\12\62\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\11\62\1\71\3\62\1\72\10\62\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\6\62\1\71\5\62\1\73\11\62\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\5\62\1\74\7\62\1\75\10\62\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\5\62\1\76\20\62\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\62\2\0\5\62\1\0\22\62"+
    "\1\77\3\62\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\62\2\0\5\62\1\0\15\62\1\64\10\62"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\0\5\62\1\0\5\62\1\100\7\62\1\101\10\62"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\0\5\62\1\0\21\62\1\102\4\62\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\62\2\0\5\62"+
    "\1\0\10\62\1\103\15\62\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\62\2\0\5\62\1\0\15\62"+
    "\1\104\10\62\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\62\2\0\5\62\1\0\10\62\1\105\15\62"+
    "\61\0\1\10\6\43\1\44\60\43\1\106\52\43\11\0"+
    "\1\47\53\0\1\46\1\0\1\46\2\0\1\107\22\0"+
    "\1\46\3\0\1\46\5\0\1\46\2\0\1\46\1\0"+
    "\1\46\35\0\1\56\30\0\13\110\1\111\45\110\2\53"+
    "\1\4\1\5\55\53\20\0\2\54\4\0\1\112\52\0"+
    "\2\55\57\0\2\56\2\0\3\56\4\0\6\56\21\0"+
    "\4\57\5\0\1\60\3\0\1\61\43\0\4\61\17\0"+
    "\5\113\2\0\25\113\2\0\4\57\5\0\1\60\3\0"+
    "\1\61\1\0\2\114\2\0\5\114\1\0\26\114\2\0"+
    "\4\57\5\0\1\60\3\0\1\61\1\0\2\114\2\0"+
    "\5\114\1\0\17\114\1\115\6\114\2\0\4\57\5\0"+
    "\1\60\3\0\1\61\1\0\2\114\2\0\5\114\1\0"+
    "\15\114\1\116\10\114\2\0\4\57\5\0\1\60\3\0"+
    "\1\61\1\0\2\114\2\0\5\114\1\0\5\114\1\117"+
    "\20\114\2\0\4\57\5\0\1\60\3\0\1\61\1\0"+
    "\2\114\2\0\5\114\1\0\1\114\1\120\24\114\2\0"+
    "\4\57\5\0\1\60\3\0\1\61\1\0\2\114\2\0"+
    "\5\114\1\0\14\114\1\121\11\114\2\0\4\57\5\0"+
    "\1\60\3\0\1\61\1\0\2\114\2\0\5\114\1\0"+
    "\20\114\1\122\5\114\2\0\4\57\5\0\1\60\3\0"+
    "\1\61\1\0\2\114\2\0\5\114\1\0\17\114\1\123"+
    "\6\114\2\0\4\57\5\0\1\60\3\0\1\61\1\0"+
    "\2\114\2\0\5\114\1\0\1\124\20\114\1\123\4\114"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\114"+
    "\2\0\5\114\1\0\14\114\1\123\4\114\1\123\4\114"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\114"+
    "\2\0\5\114\1\0\15\114\1\125\10\114\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\114\2\0\5\114"+
    "\1\0\24\114\1\123\1\114\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\114\2\0\5\114\1\0\21\114"+
    "\1\126\4\114\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\114\2\0\5\114\1\0\1\114\1\116\17\114"+
    "\1\127\4\114\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\114\2\0\5\114\1\0\6\114\1\123\17\114"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\114"+
    "\2\0\5\114\1\0\1\114\1\130\15\114\1\131\6\114"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\114"+
    "\2\0\5\114\1\0\5\114\1\132\20\114\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\114\2\0\5\114"+
    "\1\0\11\114\1\133\14\114\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\114\2\0\5\114\1\0\11\114"+
    "\1\134\14\114\1\0\13\110\1\135\45\110\13\0\1\111"+
    "\3\0\1\136\55\0\2\137\2\0\2\140\51\0\1\141"+
    "\5\0\2\142\2\0\5\142\1\0\26\142\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\143\2\0\5\143"+
    "\1\0\26\143\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\143\2\0\5\143\1\0\1\143\1\144\24\143"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\143"+
    "\2\0\5\143\1\0\13\143\1\145\12\143\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\143\2\0\5\143"+
    "\1\0\1\143\1\146\24\143\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\143\2\0\5\143\1\0\20\143"+
    "\1\147\5\143\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\143\2\0\5\143\1\0\21\143\1\150\4\143"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\143"+
    "\2\0\5\143\1\0\5\143\1\145\20\143\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\143\2\0\5\143"+
    "\1\0\11\143\1\151\6\143\1\152\5\143\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\143\2\0\5\143"+
    "\1\0\16\143\1\145\7\143\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\143\2\0\5\143\1\0\1\153"+
    "\25\143\2\0\4\57\5\0\1\60\3\0\1\61\1\0"+
    "\2\143\2\0\5\143\1\0\22\143\1\154\3\143\2\0"+
    "\4\57\5\0\1\60\3\0\1\61\1\0\2\143\2\0"+
    "\5\143\1\0\21\143\1\155\4\143\2\0\4\57\5\0"+
    "\1\60\3\0\1\61\1\0\2\143\2\0\5\143\1\0"+
    "\11\143\1\156\14\143\2\0\4\57\5\0\1\60\3\0"+
    "\1\61\1\0\2\143\2\0\5\143\1\0\14\143\1\145"+
    "\11\143\2\0\4\57\5\0\1\60\3\0\1\61\1\0"+
    "\2\143\2\0\5\143\1\0\4\143\1\145\21\143\2\0"+
    "\4\57\5\0\1\60\3\0\1\61\1\0\2\143\2\0"+
    "\5\143\1\0\13\143\1\157\12\143\1\0\13\110\1\135"+
    "\3\110\1\136\41\110\20\0\2\140\51\0\1\141\5\0"+
    "\2\160\2\0\5\160\1\0\26\160\2\0\4\57\5\0"+
    "\1\60\3\0\1\61\1\0\2\161\2\0\5\161\1\0"+
    "\26\161\2\0\4\57\5\0\1\60\3\0\1\61\1\0"+
    "\2\161\2\0\5\161\1\0\25\161\1\162\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\161\2\0\5\161"+
    "\1\0\12\161\1\162\13\161\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\161\2\0\5\161\1\0\20\161"+
    "\1\162\5\161\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\161\2\0\5\161\1\0\11\161\1\163\14\161"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\161"+
    "\2\0\5\161\1\0\14\161\1\164\11\161\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\161\2\0\5\161"+
    "\1\0\21\161\1\165\4\161\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\161\2\0\5\161\1\0\11\161"+
    "\1\166\6\161\1\167\5\161\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\161\2\0\5\161\1\0\17\161"+
    "\1\170\6\161\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\161\2\0\5\161\1\0\11\161\1\171\14\161"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\161"+
    "\2\0\5\161\1\0\14\161\1\172\11\161\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\161\2\0\5\161"+
    "\1\0\5\161\1\162\20\161\13\0\1\141\5\0\2\173"+
    "\2\0\5\173\1\0\26\173\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\174\2\0\5\174\1\0\26\174"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\174"+
    "\2\0\5\174\1\0\14\174\1\175\11\174\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\174\2\0\5\174"+
    "\1\0\21\174\1\176\4\174\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\174\2\0\5\174\1\0\17\174"+
    "\1\177\6\174\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\174\2\0\5\174\1\0\14\174\1\200\11\174"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\174"+
    "\2\0\5\174\1\0\21\174\1\201\4\174\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\174\2\0\5\174"+
    "\1\0\14\174\1\176\11\174\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\174\2\0\5\174\1\0\3\174"+
    "\1\176\22\174\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\174\2\0\5\174\1\0\7\174\1\176\16\174"+
    "\13\0\1\141\5\0\2\202\2\0\5\202\1\0\26\202"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\203"+
    "\2\0\5\203\1\0\26\203\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\203\2\0\5\203\1\0\22\203"+
    "\1\204\3\203\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\203\2\0\5\203\1\0\11\203\1\205\14\203"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\203"+
    "\2\0\5\203\1\0\21\203\1\206\4\203\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\203\2\0\5\203"+
    "\1\0\17\203\1\207\6\203\13\0\1\141\5\0\2\210"+
    "\2\0\5\210\1\0\26\210\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\211\2\0\5\211\1\0\26\211"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\211"+
    "\2\0\5\211\1\0\5\211\1\212\20\211\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\211\2\0\5\211"+
    "\1\0\14\211\1\213\11\211\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\211\2\0\5\211\1\0\11\211"+
    "\1\214\14\211\13\0\1\141\5\0\2\215\2\0\5\215"+
    "\1\0\26\215\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\216\2\0\5\216\1\0\26\216\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\216\2\0\5\216"+
    "\1\0\7\216\1\217\16\216\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\216\2\0\5\216\1\0\14\216"+
    "\1\220\11\216\13\0\1\141\5\0\2\221\2\0\5\221"+
    "\1\0\26\221\2\0\4\57\5\0\1\60\3\0\1\61"+
    "\1\0\2\222\2\0\5\222\1\0\26\222\2\0\4\57"+
    "\5\0\1\60\3\0\1\61\1\0\2\222\2\0\5\222"+
    "\1\0\7\222\1\223\16\222\13\0\1\141\5\0\2\224"+
    "\2\0\5\224\1\0\26\224\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\225\2\0\5\225\1\0\26\225"+
    "\13\0\1\141\5\0\2\226\2\0\5\226\1\0\26\226"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\227"+
    "\2\0\5\227\1\0\26\227\13\0\1\141\5\0\2\230"+
    "\2\0\5\230\1\0\26\230\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\231\2\0\5\231\1\0\26\231"+
    "\13\0\1\141\5\0\2\232\2\0\5\232\1\0\26\232"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\233"+
    "\2\0\5\233\1\0\26\233\13\0\1\141\5\0\2\234"+
    "\2\0\5\234\1\0\26\234\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\235\2\0\5\235\1\0\26\235"+
    "\13\0\1\141\5\0\2\236\2\0\5\236\1\0\26\236"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\237"+
    "\2\0\5\237\1\0\26\237\13\0\1\141\5\0\2\240"+
    "\2\0\5\240\1\0\26\240\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\241\2\0\5\241\1\0\26\241"+
    "\13\0\1\141\5\0\2\242\2\0\5\242\1\0\26\242"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\243"+
    "\2\0\5\243\1\0\26\243\13\0\1\141\5\0\2\244"+
    "\2\0\5\244\1\0\26\244\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\245\2\0\5\245\1\0\26\245"+
    "\13\0\1\141\5\0\2\246\2\0\5\246\1\0\26\246"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\247"+
    "\2\0\5\247\1\0\26\247\13\0\1\141\5\0\2\250"+
    "\2\0\5\250\1\0\26\250\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\251\2\0\5\251\1\0\26\251"+
    "\13\0\1\141\5\0\2\252\2\0\5\252\1\0\26\252"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\253"+
    "\2\0\5\253\1\0\26\253\13\0\1\141\5\0\2\254"+
    "\2\0\5\254\1\0\26\254\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\255\2\0\5\255\1\0\26\255"+
    "\13\0\1\141\5\0\2\256\2\0\5\256\1\0\26\256"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\257"+
    "\2\0\5\257\1\0\26\257\13\0\1\141\5\0\2\260"+
    "\2\0\5\260\1\0\26\260\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\261\2\0\5\261\1\0\26\261"+
    "\13\0\1\141\5\0\2\262\2\0\5\262\1\0\26\262"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\263"+
    "\2\0\5\263\1\0\26\263\13\0\1\141\5\0\2\264"+
    "\2\0\5\264\1\0\26\264\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\265\2\0\5\265\1\0\26\265"+
    "\13\0\1\141\5\0\2\266\2\0\5\266\1\0\26\266"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\267"+
    "\2\0\5\267\1\0\26\267\13\0\1\141\5\0\2\270"+
    "\2\0\5\270\1\0\26\270\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\271\2\0\5\271\1\0\26\271"+
    "\13\0\1\141\5\0\2\272\2\0\5\272\1\0\26\272"+
    "\2\0\4\57\5\0\1\60\3\0\1\61\1\0\2\273"+
    "\2\0\5\273\1\0\26\273\13\0\1\141\5\0\2\274"+
    "\2\0\5\274\1\0\26\274\2\0\4\57\5\0\1\60"+
    "\3\0\1\61\1\0\2\275\2\0\5\275\1\0\26\275"+
    "\13\0\1\141\5\0\2\276\2\0\5\276\1\0\26\276"+
    "\13\0\1\141\5\0\2\277\2\0\5\277\1\0\26\277"+
    "\13\0\1\141\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8281];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\1\11\32\1\1\0\1\11\2\0"+
    "\1\11\3\0\4\1\1\0\1\11\1\0\26\1\3\0"+
    "\22\1\1\0\1\11\1\0\1\1\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public boolean inDcl=false;
    public ArrayList <Symbol> symTab= new ArrayList<>();
    public Symbol crntSymbl;
    public int lineNmbr=1;
    @Override
    public String nextToken() {
        try {
          crntSymbl = nxtSmbl();
          if(crntSymbl==null){
              boolean notFined=true;
              int index=0;
              for (Symbol symbol:symTab)
                if(symbol.value.equals("Main")){
                    notFined=false;
                    index=symTab.indexOf(symbol);
                }
                if(notFined) {
                    System.err.println("your program doesn't have class Main\nnot compiled");
                    exit(0);
                }
                else {
                    notFined=true;
                    for (Symbol symbol:symTab.get(index).subSymbols)
                        if(symbol.value.equals("main"))
                            notFined=false;
                }
                if (notFined){
                    System.err.println("your program doesn't have method main\nnot compiled");
                    exit(0);
                }
                CG.writer = new FileWriter(CG.outputAddress);
                String result=CG.data+CG.text;
                CG.writer.write(result);
                CG.writer.close();
              return "$";
          }
          if (crntSymbl.tokenName.equals("error")) {
              return "error";
          }
          if (crntSymbl.tokenName.equals("reserved")) {
            return crntSymbl.value;
          }
          if (crntSymbl.tokenName.equals("oprndpnctution")) {
              if(crntSymbl.value.equals(";"))
                  return "semiCln";
              if(crntSymbl.value.equals(","))
                  return "comma";
              return crntSymbl.value;
          }
          if (crntSymbl.tokenName.equals("id")) {
              return "id";
          }
          if (crntSymbl.tokenName.equals("mthdId")) {
               return "mthdId";
          }
          if (crntSymbl.tokenName.equals("complexId")) {
                return "complexId";
          }
          if (crntSymbl.tokenName.equals("complexMthdId")) {
                 return "complexMthdId";
          }
          return crntSymbl.tokenName;
        } catch (IOException e) {
          e.printStackTrace();
          return null;
        }
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CmpScnr(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nxtSmbl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("token not acceptable");
            }
            // fall through
          case 15: break;
          case 2:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 16: break;
          case 3:
            { lineNmbr++;
        yybegin(YYINITIAL);
            }
            // fall through
          case 17: break;
          case 4:
            { return new Symbol("oprndpnctution", yytext());
            }
            // fall through
          case 18: break;
          case 5:
            { return new Symbol("constant", yytext(), "int");
            }
            // fall through
          case 19: break;
          case 6:
            { switch (yytext()) {
            case "true":
            case "false":
            return new Symbol("constant", yytext(),"bool");
        }
        return new Symbol("id", yytext());
            }
            // fall through
          case 20: break;
          case 7:
            { return new Symbol("constant", yytext(),"string");
            }
            // fall through
          case 21: break;
          case 8:
            { return new Symbol("constant", yytext(), "char");
            }
            // fall through
          case 22: break;
          case 9:
            { return new Symbol("constant", yytext(), "real");
            }
            // fall through
          case 23: break;
          case 10:
            { return new Symbol("mthdId", yytext());
            }
            // fall through
          case 24: break;
          case 11:
            { switch (yytext()) {
            case "void":
                return new Symbol("id", yytext(), "void");
            case "int":
                return new Symbol("int", yytext(), "int");
            case "in_int":
            case "out_int":
                return new Symbol("reserved", yytext(), "int");
            case "real":
                return new Symbol("real", yytext(), "real");
            case "bool":
                return new Symbol("bool", yytext(), "bool");
            case "string":
                return new Symbol("id", yytext(), "string");
            case "in_string":
            case "out_string":
                return new Symbol("reserved", yytext(), "string");
        }
        return new Symbol("reserved", yytext());
            }
            // fall through
          case 25: break;
          case 12:
            { return new Symbol("complexId", yytext());
            }
            // fall through
          case 26: break;
          case 13:
            { lineNmbr+=yytext().chars().filter(ch -> ch == '\n').count();
        yybegin(YYINITIAL);
            }
            // fall through
          case 27: break;
          case 14:
            { return new Symbol("complexMthdId", yytext());
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
